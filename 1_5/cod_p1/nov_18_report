See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 44 warnings)

Correctness:  22/30 tests passed
Memory:       4/8 tests passed
Timing:       20/20 tests passed

Aggregate score: 79.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.8K Nov 19 03:32 Percolation.java
3.3K Nov 19 03:32 PercolationStats.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Percolation.java
*-----------------------------------------------------------

% javac PercolationStats.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Percolation:

PercolationStats:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
Percolation.java:117: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Percolation.java:118: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Percolation.java:118: The private instance (or static) variable 'a_union_set' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:119: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Percolation.java:119: The private instance (or static) variable 'size' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:120: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Percolation.java:120: The private instance (or static) variable 'top' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:121: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Percolation.java:121: The private instance (or static) variable 'bottom' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Percolation.java:122: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PercolationStats.java:136: Can you replace the instance (or static) variable 'grid' with a local variable? [SingularField]
PercolationStats.java:136: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PercolationStats.java:137: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PercolationStats.java:137: The private instance (or static) variable 't' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PercolationStats.java:138: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PercolationStats.java:138: The private instance (or static) variable 'success' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PercolationStats.java:139: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PMD ends with 17 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Percolation.java:2:1: Unnecessary import statement for 'java.lang.IllegalArgumentException' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Percolation.java:2:8: Unused import statement for 'java.lang.IllegalArgumentException'. [UnusedImports]
[WARN] Percolation.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Percolation.java:8:13: The local variable 'last_row_first_col' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Percolation.java:12:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:17:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:18:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:28:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:29:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:30:16: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:31:21: '(' is followed by whitespace. [ParenPad]
[WARN] Percolation.java:31:43: ')' is preceded with whitespace. [ParenPad]
[WARN] Percolation.java:34:22: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:34:22: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:38:18: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] Percolation.java:38:18: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:48:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:54:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:55:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:56:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:57:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:58:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:59:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:60:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Percolation.java:61:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:64:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:65:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:73:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:80:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Percolation.java:117:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] Percolation.java:118:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] Percolation.java:118:34: The instance variable 'a_union_set' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Percolation.java:118:45: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Percolation.java:119:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] Percolation.java:120:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] Percolation.java:121:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] Percolation.java:122:5: Declare instance variables after static variables but before constructors and methods. [DeclarationOrder]
[WARN] PercolationStats.java:3:8: Unused import statement for 'edu.princeton.cs.algs4.Stopwatch'. [UnusedImports]
[WARN] PercolationStats.java:85:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
...
Checkstyle ends with 0 errors and 43 warnings.

% custom checkstyle checks for Percolation.java
*-----------------------------------------------------------
[INFO] Percolation.java:64: Using a loop in this method might be a performance bug. [Performance]

% custom checkstyle checks for PercolationStats.java
*-----------------------------------------------------------
[WARN] PercolationStats.java:1:1: The constant '1.96' appears more than once. Define a constant variable (such as 'CONFIDENCE_95') to hold the constant '1.96'. [NumericLiteralCount]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Percolation
*-----------------------------------------------------------
Running 15 total tests.

Tests 1 through 8 create a Percolation object using your code, then repeatedly
open sites by calling open(). After each call to open(), it checks the return
values of isOpen(), percolates(), numberOfOpenSites(), and isFull() in that order.
Except as noted, a site is opened at most once.

Tests 13 through 15 test backwash.

Test 1: open predetermined list of sites using file inputs
  * filename = input6.txt
  * filename = input8.txt
  * filename = input8-no.txt
  * filename = input10-no.txt
  * filename = greeting57.txt
  * filename = heart25.txt
==> passed

Test 2: open random sites until just before system percolates
  * n = 3
  * n = 5
  * n = 10
  * n = 10
  * n = 20
  * n = 20
  * n = 50
  * n = 50
==> passed

Test 3: open predetermined sites for n = 1 and n = 2 (corner case test)
  * filename = input1.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input1-no.txt
    - percolates() returns wrong value after 0 sites opened
    - student   percolates() = true
    - reference percolates() = false

  * filename = input2.txt
  * filename = input2-no.txt
==> FAILED

Test 4: check predetermined sites with long percolating path
  * filename = snake13.txt
  * filename = snake101.txt
==> passed

Test 5: open every site
  * filename = input5.txt
==> passed

Test 6: open random sites until just before system percolates,
        allowing open() to be called on a site more than once
  * n = 3
    - numberOfOpenSites() returns wrong value after 3 sites opened
    - student   numberOfOpenSites() = 4
    - reference numberOfOpenSites() = 3

  * n = 5
    - numberOfOpenSites() returns wrong value after 6 sites opened
    - student   numberOfOpenSites() = 7
    - reference numberOfOpenSites() = 6

  * n = 10
    - numberOfOpenSites() returns wrong value after 15 sites opened
    - student   numberOfOpenSites() = 16
    - reference numberOfOpenSites() = 15

  * n = 10
    - numberOfOpenSites() returns wrong value after 18 sites opened
    - student   numberOfOpenSites() = 19
    - reference numberOfOpenSites() = 18

  * n = 20
    - numberOfOpenSites() returns wrong value after 12 sites opened
    - student   numberOfOpenSites() = 13
    - reference numberOfOpenSites() = 12

  * n = 20
    - numberOfOpenSites() returns wrong value after 39 sites opened
    - student   numberOfOpenSites() = 40
    - reference numberOfOpenSites() = 39

  * n = 50
    - numberOfOpenSites() returns wrong value after 36 sites opened
    - student   numberOfOpenSites() = 37
    - reference numberOfOpenSites() = 36

  * n = 50
    - numberOfOpenSites() returns wrong value after 93 sites opened
    - student   numberOfOpenSites() = 94
    - reference numberOfOpenSites() = 93

==> FAILED

Test 7: call methods with invalid arguments
  * n = 10, (row, col) = (-1, 5)
    - open() throws the wrong exception
    - open() throws a java.lang.ArrayIndexOutOfBoundsException
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() throws the wrong exception
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (11, 5)
    - open() throws the wrong exception
    - open() throws a java.lang.ArrayIndexOutOfBoundsException
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() throws the wrong exception
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (0, 5)
    - open() throws the wrong exception
    - open() throws a java.lang.ArrayIndexOutOfBoundsException
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() throws the wrong exception
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (5, -1)
    - open() fails to throw an exception
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() fails to throw an exception
    - isOpen() should throw a java.lang.IllegalArgumentException

    - isFull() fails to throw an exception
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (5, 11)
    - open() fails to throw an exception
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() fails to throw an exception
    - isOpen() should throw a java.lang.IllegalArgumentException

    - isFull() fails to throw an exception
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (5, 0)
    - open() fails to throw an exception
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() fails to throw an exception
    - isOpen() should throw a java.lang.IllegalArgumentException

    - isFull() fails to throw an exception
    - isFull() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (-2147483648, -2147483648)
    - open() throws the wrong exception
    - open() throws a java.lang.ArrayIndexOutOfBoundsException
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() throws the wrong exception
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException

  * n = 10, (row, col) = (2147483647, 2147483647)
    - open() throws the wrong exception
    - open() throws a java.lang.ArrayIndexOutOfBoundsException
    - open() should throw a java.lang.IllegalArgumentException

    - isOpen() throws the wrong exception
    - isOpen() throws a java.lang.ArrayIndexOutOfBoundsException
    - isOpen() should throw a java.lang.IllegalArgumentException

==> FAILED

Test 8: call constructor with invalid argument
  * n = -10
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

  * n = -1
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

  * n = 0
    - the constructor fails to throw an exception
    - the constructor should throw a java.lang.IllegalArgumentException

==> FAILED

Test 9: create multiple Percolation objects at the same time
        (to make sure you didn't store data in static variables)
==> passed

Test 10: open predetermined list of sites using file inputs,
         but permute the order in which methods are called
  * filename = input8.txt;  order =     isFull(),     isOpen(), percolates()
  * filename = input8.txt;  order =     isFull(), percolates(),     isOpen()
  * filename = input8.txt;  order =     isOpen(),     isFull(), percolates()
  * filename = input8.txt;  order =     isOpen(), percolates(),     isFull()
  * filename = input8.txt;  order = percolates(),     isOpen(),     isFull()
  * filename = input8.txt;  order = percolates(),     isFull(),     isOpen()
==> passed

Test 11: call all methods in random order until just before system percolates
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 12: call all methods in random order until almost all sites are open,
         but with inputs not prone to backwash
  * n = 3
  * n = 5
  * n = 7
  * n = 10
  * n = 20
  * n = 50
==> passed

Test 13: check for backwash with predetermined sites
  * filename = input20.txt
    - isFull() returns wrong value after 231 sites opened
    - student   isFull(18, 1) = true
    - reference isFull(18, 1) = false
  * filename = input10.txt
    - isFull() returns wrong value after 56 sites opened
    - student   isFull(9, 1) = true
    - reference isFull(9, 1) = false
  * filename = input50.txt
    - isFull() returns wrong value after 1412 sites opened
    - student   isFull(22, 28) = true
    - reference isFull(22, 28) = false
  * filename = jerry47.txt
    - isFull() returns wrong value after 1076 sites opened
    - student   isFull(11, 47) = true
    - reference isFull(11, 47) = false
  * filename = sedgewick60.txt
    - isFull() returns wrong value after 1577 sites opened
    - student   isFull(21, 59) = true
    - reference isFull(21, 59) = false
  * filename = wayne98.txt
    - isFull() returns wrong value after 3851 sites opened
    - student   isFull(69, 9) = true
    - reference isFull(69, 9) = false
==> FAILED

Test 14: check for backwash with predetermined sites that have
         multiple percolating paths
  * filename = input3.txt
    - isFull() returns wrong value after 4 sites opened
    - student   isFull(3, 1) = true
    - reference isFull(3, 1) = false
  * filename = input4.txt
    - isFull() returns wrong value after 7 sites opened
    - student   isFull(4, 4) = true
    - reference isFull(4, 4) = false
  * filename = input7.txt
    - isFull() returns wrong value after 12 sites opened
    - student   isFull(6, 1) = true
    - reference isFull(6, 1) = false
==> FAILED

Test 15: call all methods in random order until all sites are open,
         allowing isOpen() to be called on a site more than once
         (these inputs are prone to backwash)
  * n = 3
    - numberOfOpenSites() returns wrong value after 6 sites opened
    - student   numberOfOpenSites() = 8
    - reference numberOfOpenSites() = 6

    - failed on trial 1 of 40

  * n = 5
    - numberOfOpenSites() returns wrong value after 7 sites opened
    - student   numberOfOpenSites() = 9
    - reference numberOfOpenSites() = 7

    - failed on trial 1 of 20

  * n = 7
    - numberOfOpenSites() returns wrong value after 12 sites opened
    - student   numberOfOpenSites() = 13
    - reference numberOfOpenSites() = 12

    - failed on trial 1 of 10

  * n = 10
    - numberOfOpenSites() returns wrong value after 7 sites opened
    - student   numberOfOpenSites() = 8
    - reference numberOfOpenSites() = 7

    - failed on trial 1 of 5

  * n = 20
    - numberOfOpenSites() returns wrong value after 34 sites opened
    - student   numberOfOpenSites() = 35
    - reference numberOfOpenSites() = 34

    - failed on trial 1 of 2

  * n = 50
    - numberOfOpenSites() returns wrong value after 69 sites opened
    - student   numberOfOpenSites() = 70
    - reference numberOfOpenSites() = 69

    - failed on trial 1 of 1

==> FAILED


Total: 8/15 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Percolation)
********************************************************************************

Testing correctness of PercolationStats
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check that methods in PercolationStats do not print to standard output
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: check that mean() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 3: check that stddev() returns value in expected range
  * n =   2, trials = 10000
  * n =   5, trials = 10000
  * n =  10, trials = 10000
  * n =  25, trials = 10000
==> passed

Test 4: check that PercolationStats creates trials Percolation objects, each of size n-by-n
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 5: check that PercolationStats calls open() until system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 6: check that PercolationStats does not call open() after system percolates
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 7: check that mean() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 8: check that stddev() is consistent with the number of intercepted calls to open()
        on blocked sites
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 9: check that confidenceLo() and confidenceHigh() are consistent with mean() and stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 10: check that exception is thrown if either n or trials is out of bounds
  * n = -23, trials =  42
  * n =  23, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n = -42, trials =   0
    - fails to throw an exception when calling constructor with invalid arguments

  * n =  42, trials =  -1
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

  * n = -2147483648, trials = -2147483648
    - throws wrong exception when calling constructor with invalid arguments
    - throws a java.lang.NegativeArraySizeException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 11: create two PercolationStats objects at the same time and check mean()
         (to make sure you didn't store data in static variables)
  * n1 =  50, trials1 =  10, n2 =  50, trials2 =   5
  * n1 =  50, trials1 =   5, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  25, trials2 =  10
  * n1 =  25, trials1 =  10, n2 =  50, trials2 =  10
  * n1 =  50, trials1 =  10, n2 =  15, trials2 = 100
  * n1 =  15, trials1 = 100, n2 =  50, trials2 =  10
==> passed

Test 12: check that the methods return the same value, regardless of
         the order in which they are called
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 13: check that no calls to StdRandom.setSeed()
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 14: check distribution of number of sites opened until percolation
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed

Test 15: check that each site is opened the expected number of times
  * n = 2, trials = 100000
  * n = 3, trials = 100000
  * n = 4, trials = 100000
==> passed


Total: 14/15 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Percolation)
********************************************************************************

Analyzing memory of PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check memory usage as a function of T trials for n = 100
            (max allowed: 8*T + 128 bytes)

                 T        bytes
--------------------------------------------
=> FAILED       16       180816 (706.3x)
=> FAILED       32       180944 (471.2x)
=> FAILED       64       181200 (283.1x)
=> FAILED      128       181712 (157.7x)
==> 0/4 tests passed


If you failed this test, it may be because you are holding an unnecessary
reference to a (large) Percolation object in an instance variable. Would
storing it in a local variable suffice?


Estimated student memory = 8.00 T + 180688.00   (R^2 = 1.000)

Total: 0/4 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Percolation)
********************************************************************************

Timing PercolationStats
*-----------------------------------------------------------
Running 4 total tests.

Test 1: count calls to StdStats.mean() and StdStats.stddev()
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 2: count calls to methods in StdRandom
  * n = 20, trials = 10
  * n = 20, trials = 10
  * n = 40, trials = 10
  * n = 80, trials = 10
==> passed

Test 3: count calls to methods in Percolation
  * n =  20, trials =  10
  * n =  50, trials =  20
  * n = 100, trials =  50
  * n =  64, trials = 150
==> passed

Test 4: Call PercolationStats methods with trials = 3 and values of n that go up
        by a factor of sqrt(2). The test passes when n reaches 2,896.

     The approximate order-of-growth is n ^ (log ratio)

         n  seconds log ratio
     ------------------------
       724     0.17       2.2
      1024     0.40       2.5
      1448     1.07       2.8
      2048     2.91       2.9
      2896     7.37       2.7
==> passed


Total: 4/4 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Percolation
*-----------------------------------------------------------
Running 4 total tests.

Test 1a-1d: check that total memory <= 17 n^2 + 128 n + 1024 bytes

                 n        bytes
--------------------------------------------
=> passed       64        37040         
=> passed      256       590000         
=> passed      512      2359472         
=> passed     1024      9437360         
==> 4/4 tests passed


Estimated student memory = 9.00 n^2 + 0.00 n + 176.00   (R^2 = 1.000)


Test 2 (bonus): check that total memory <= 11 n^2 + 128 n + 1024 bytes
   -  bonus available only if solution passes backwash correctness test
==> FAILED


Total: 4/4 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Percolation
*-----------------------------------------------------------
Running 16 total tests.

Test 1a-1e: Creates an n-by-n percolation system; open sites at random until
            the system percolates, interleaving calls to percolates() and open().
            Count calls to connected(), union() and find().

                                       2 * connected()
                 n       union()              + find()        constructor
-----------------------------------------------------------------------------------
=> passed       16          176                   288                   1         
=> passed       32          668                  1110                   1         
=> passed       64         2835                  4776                   1         
=> passed      128        11768                 19562                   1         
=> passed      256        44579                 76154                   1         
=> passed      512       184053                310132                   1         
=> passed     1024       734086               1240232                   1         
==> 7/7 tests passed


If one of the values in the table violates the performance limits
the factor by which you failed the test appears in parentheses.
For example, (9.6x) in the union() column indicates that it uses
9.6x too many calls.


Tests 2a-2f: Check whether the number of calls to union(), connected(), and find()
             is a constant per call to open(), isOpen(), isFull(), and percolates().
             The table shows the maximum number of union(), connected(), and
             find() calls made during a single call to open(), isOpen(), isFull(),
             and percolates().

                 n     per open()      per isOpen()    per isFull()    per percolates() 
---------------------------------------------------------------------------------------------
=> passed       16        4               0               1               1         
=> passed       32        4               0               1               1         
=> passed       64        4               0               1               1         
=> passed      128        4               0               1               1         
=> passed      256        4               0               1               1         
=> passed      512        4               0               1               1         
=> passed     1024        4               0               1               1         
==> 7/7 tests passed



Running time (in seconds) depends on the machine on which the script runs.


Test 3: Create an n-by-n percolation system; interleave calls to percolates()
        and open() until the system percolates. The values of n go up by a
        factor of sqrt(2). The test is passed if n >= 4096 in under 10 seconds.

     The approximate order-of-growth is n ^ (log ratio)

                        log   union-find     log
         n  seconds   ratio   operations   ratio
     -------------------------------------------
      1448     0.27     3.1      5476824     2.0
      2048     0.68     2.7     10862216     2.0
      2896     1.85     2.9     21684468     2.0
      4096     4.53     2.6     43366192     2.0
==> passed



Test 4: Create an n-by-n percolation system; interleave calls to open(),
        percolates(), isOpen(), isFull(), and numberOfOpenSites() until.
        the system percolates. The values of n go up by a factor of sqrt(2).
        The test is passed if n >= 4096 in under 10 seconds.

                        log   union-find     log
         n  seconds   ratio   operations   ratio
     -------------------------------------------
      1448     0.27     3.1      7916040     2.0
      2048     0.79     3.1     15836444     2.0
      2896     2.15     2.9     31714926     2.0
      4096     4.66     2.2     63287262     2.0
==> passed


Total: 16/16 tests passed!


================================================================



