See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 3 warnings)
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  30/43 tests passed
Memory:       103/105 tests passed
Timing:       92/136 tests passed

Aggregate score: 75.20%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.9K Dec 26 08:47 Deque.java
 474 Dec 26 08:47 Permutation.java
2.5K Dec 26 08:47 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:24: warning: [unchecked] unchecked cast
		items = (Item[]) new Object[1];
		                 ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:64: warning: [unchecked] unchecked cast
		items = (Item[]) newPlace;
		                 ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:74: warning: [unchecked] unchecked cast
		items = (Item[]) newPlace;
		                 ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
3 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At RandomizedQueue.java:[line 125]
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At Deque.java:[lines 115-118]
M P SS_SHOULD_BE_STATIC SS: The instance variable 'ScaleFactor' is final and initialized to a compile-time constant. Should it also be static?  At RandomizedQueue.java:[line 8]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
RandomizedQueue.java:8: This instance variable should be turned into a class constant by adding the 'static' modifier. [FinalFieldCouldBeStatic]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Deque.java:65:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:79:11: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Permutation.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Permutation.java:18:19: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:6:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] RandomizedQueue.java:8:23: The instance variable 'ScaleFactor' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] RandomizedQueue.java:23:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
Checkstyle ends with 0 errors and 8 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.isEmpty()         ==> false
         deque.removeFirst()     ==> 0
         deque.isEmpty()         ==> false

  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.removeFirst()     ==> 0
         deque.isEmpty()         ==> false

  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(3)
         deque.removeFirst()     ==> 3
         deque.isEmpty()         ==> false

  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.addFirst(Deque.java:36)
    TestDeque.random(TestDeque.java:72)
    TestDeque.test2(TestDeque.java:460)
    TestDeque.main(TestDeque.java:830)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.isEmpty()         ==> false
         deque.removeFirst()     ==> 0
         deque.addFirst(3)

==> FAILED

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:76)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:472)
    TestDeque.main(TestDeque.java:831)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.addFirst(2)
         deque.removeLast()

  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:76)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:473)
    TestDeque.main(TestDeque.java:831)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.addFirst(2)
         deque.removeLast()

  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.isEmpty()         ==> false

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeLast(Deque.java:76)
    TestDeque.random(TestDeque.java:106)
    TestDeque.test3(TestDeque.java:475)
    TestDeque.main(TestDeque.java:831)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(2)
         deque.isEmpty()         ==> false
         deque.removeLast()      ==> 2
         deque.addFirst(5)
         deque.removeLast()

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addFirst(0)
         deque.removeLast()      ==> 0
         deque.isEmpty()         ==> false

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(2)
         deque.removeLast()      ==> 2
         deque.isEmpty()         ==> false

  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.removeLast()      ==> 0
         deque.isEmpty()         ==> false

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:51)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test4(TestDeque.java:492)
    TestDeque.main(TestDeque.java:832)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.removeLast()      ==> 0
         deque.addLast(2)

==> FAILED

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.removeFirst()     ==> 0
         deque.isEmpty()         ==> false

  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:62)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:506)
    TestDeque.main(TestDeque.java:833)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addLast(4)
         deque.removeFirst()     ==> 4
         deque.addLast(6)
         deque.removeFirst()

  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:62)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:507)
    TestDeque.main(TestDeque.java:833)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.addLast(1)
         deque.removeFirst()     ==> 1
         deque.addLast(3)
         deque.removeFirst()

  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:62)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test5(TestDeque.java:508)
    TestDeque.main(TestDeque.java:833)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.isEmpty()         ==> false
         deque.isEmpty()         ==> false
         deque.removeFirst()     ==> 0
         deque.addLast(4)
         deque.removeFirst()

==> FAILED

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    java.lang.NullPointerException

    Deque.addLast(Deque.java:51)
    TestDeque.random(TestDeque.java:77)
    TestDeque.test6(TestDeque.java:523)
    TestDeque.main(TestDeque.java:834)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.size()            ==> 0
         deque.addFirst(1)
         deque.removeLast()      ==> 1
         deque.addLast(3)

  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - student   size() returned 1
    - reference size() returned 0
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.removeFirst()     ==> 0
         deque.size()            ==> 1

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.removeFirst()     ==> 0
         deque.isEmpty()         ==> false

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    java.lang.NullPointerException

    Deque.removeFirst(Deque.java:62)
    TestDeque.random(TestDeque.java:87)
    TestDeque.test6(TestDeque.java:526)
    TestDeque.main(TestDeque.java:834)

    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.isEmpty()         ==> true
         deque.isEmpty()         ==> true
         deque.addFirst(2)
         deque.addFirst(3)
         deque.removeLast()      ==> 2
         deque.removeFirst()     ==> 3
         deque.addLast(6)
         deque.addLast(7)
         deque.removeLast()      ==> 7
         deque.removeFirst()

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
  isEmpty() returns wrong value
  student   isEmpty() = false
  reference isEmpty() = true

  Failed on 9th removeFirst() operation in deque 1

  isEmpty() returns wrong value
  student   isEmpty() = false
  reference isEmpty() = true

  Failed on 999th removeFirst() operation in deque 1

==> FAILED

Test 9: check iterator() after n calls to addFirst()
  * n = 10
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  * n = 50
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

  * m = 50
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

  * m = 100
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

  * m = 1000
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 10000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
    - failed on outer loop 0 and inner loop 1
    - student   inner iterator returned 0
    - reference inner iterator returned 1

    - failed on outer loop 0 and inner loop 2
    - student   inner iterator returned 0
    - reference inner iterator returned 2

    - failed on outer loop 0 and inner loop 3
    - student   inner iterator returned 0
    - reference inner iterator returned 3

    - failed on outer loop 0 and inner loop 4
    - student   inner iterator returned 0
    - reference inner iterator returned 4

    - failed on outer loop 0 and inner loop 5
    - student   inner iterator returned 0
    - reference inner iterator returned 5

    - failed on outer loop 0 and inner loop 6
    - student   inner iterator returned 0
    - reference inner iterator returned 6

    - failed on outer loop 0 and inner loop 7
    - student   inner iterator returned 0
    - reference inner iterator returned 7

    - failed on outer loop 0 and inner loop 8
    - student   inner iterator returned 0
    - reference inner iterator returned 8

    - failed on outer loop 0 and inner loop 9
    - student   inner iterator returned 0
    - reference inner iterator returned 9

    - inner iterator returned more than 10 items

  * n = 50
    - failed on outer loop 0 and inner loop 1
    - student   inner iterator returned 0
    - reference inner iterator returned 1

    - failed on outer loop 0 and inner loop 2
    - student   inner iterator returned 0
    - reference inner iterator returned 2

    - failed on outer loop 0 and inner loop 3
    - student   inner iterator returned 0
    - reference inner iterator returned 3

    - failed on outer loop 0 and inner loop 4
    - student   inner iterator returned 0
    - reference inner iterator returned 4

    - failed on outer loop 0 and inner loop 5
    - student   inner iterator returned 0
    - reference inner iterator returned 5

    - failed on outer loop 0 and inner loop 6
    - student   inner iterator returned 0
    - reference inner iterator returned 6

    - failed on outer loop 0 and inner loop 7
    - student   inner iterator returned 0
    - reference inner iterator returned 7

    - failed on outer loop 0 and inner loop 8
    - student   inner iterator returned 0
    - reference inner iterator returned 8

    - failed on outer loop 0 and inner loop 9
    - student   inner iterator returned 0
    - reference inner iterator returned 9

    - failed on outer loop 0 and inner loop 10
    - student   inner iterator returned 0
    - reference inner iterator returned 10

    - failed on outer loop 0 and inner loop 11
    - student   inner iterator returned 0
    - reference inner iterator returned 11

    - failed on outer loop 0 and inner loop 12
    - student   inner iterator returned 0
    - reference inner iterator returned 12

    - failed on outer loop 0 and inner loop 13
    - student   inner iterator returned 0
    - reference inner iterator returned 13

    - failed on outer loop 0 and inner loop 14
    - student   inner iterator returned 0
    - reference inner iterator returned 14

    - failed on outer loop 0 and inner loop 15
    - student   inner iterator returned 0
    - reference inner iterator returned 15

    - failed on outer loop 0 and inner loop 16
    - student   inner iterator returned 0
    - reference inner iterator returned 16

    - failed on outer loop 0 and inner loop 17
    - student   inner iterator returned 0
    - reference inner iterator returned 17

    - failed on outer loop 0 and inner loop 18
    - student   inner iterator returned 0
    - reference inner iterator returned 18

    - failed on outer loop 0 and inner loop 19
    - student   inner iterator returned 0
    - reference inner iterator returned 19

    - failed on outer loop 0 and inner loop 20
    - student   inner iterator returned 0
    - reference inner iterator returned 20

    - failed on outer loop 0 and inner loop 21
    - student   inner iterator returned 0
    - reference inner iterator returned 21

    - failed on outer loop 0 and inner loop 22
    - student   inner iterator returned 0
    - reference inner iterator returned 22

    - failed on outer loop 0 and inner loop 23
    - student   inner iterator returned 0
    - reference inner iterator returned 23

    - failed on outer loop 0 and inner loop 24
    - student   inner iterator returned 0
    - reference inner iterator returned 24

    - failed on outer loop 0 and inner loop 25
    - student   inner iterator returned 0
    - reference inner iterator returned 25

    - failed on outer loop 0 and inner loop 26
    - student   inner iterator returned 0
    - reference inner iterator returned 26

    - failed on outer loop 0 and inner loop 27
    - student   inner iterator returned 0
    - reference inner iterator returned 27

    - failed on outer loop 0 and inner loop 28
    - student   inner iterator returned 0
    - reference inner iterator returned 28

    - failed on outer loop 0 and inner loop 29
    - student   inner iterator returned 0
    - reference inner iterator returned 29

    - failed on outer loop 0 and inner loop 30
    - student   inner iterator returned 0
    - reference inner iterator returned 30

    - failed on outer loop 0 and inner loop 31
    - student   inner iterator returned 0
    - reference inner iterator returned 31

    - failed on outer loop 0 and inner loop 32
    - student   inner iterator returned 0
    - reference inner iterator returned 32

    - failed on outer loop 0 and inner loop 33
    - student   inner iterator returned 0
    - reference inner iterator returned 33

    - failed on outer loop 0 and inner loop 34
    - student   inner iterator returned 0
    - reference inner iterator returned 34

    - failed on outer loop 0 and inner loop 35
    - student   inner iterator returned 0
    - reference inner iterator returned 35

    - failed on outer loop 0 and inner loop 36
    - student   inner iterator returned 0
    - reference inner iterator returned 36

    - failed on outer loop 0 and inner loop 37
    - student   inner iterator returned 0
    - reference inner iterator returned 37

    - failed on outer loop 0 and inner loop 38
    - student   inner iterator returned 0
    - reference inner iterator returned 38

    - failed on outer loop 0 and inner loop 39
    - student   inner iterator returned 0
    - reference inner iterator returned 39

    - failed on outer loop 0 and inner loop 40
    - student   inner iterator returned 0
    - reference inner iterator returned 40

    - failed on outer loop 0 and inner loop 41
    - student   inner iterator returned 0
    - reference inner iterator returned 41

    - failed on outer loop 0 and inner loop 42
    - student   inner iterator returned 0
    - reference inner iterator returned 42

    - failed on outer loop 0 and inner loop 43
    - student   inner iterator returned 0
    - reference inner iterator returned 43

    - failed on outer loop 0 and inner loop 44
    - student   inner iterator returned 0
    - reference inner iterator returned 44

    - failed on outer loop 0 and inner loop 45
    - student   inner iterator returned 0
    - reference inner iterator returned 45

    - failed on outer loop 0 and inner loop 46
    - student   inner iterator returned 0
    - reference inner iterator returned 46

    - failed on outer loop 0 and inner loop 47
    - student   inner iterator returned 0
    - reference inner iterator returned 47

    - failed on outer loop 0 and inner loop 48
    - student   inner iterator returned 0
    - reference inner iterator returned 48

    - failed on outer loop 0 and inner loop 49
    - student   inner iterator returned 0
    - reference inner iterator returned 49

    - inner iterator returned more than 50 items

==> FAILED

Test 12: create two parallel iterators to same deque
    - failed on call 1 to next()
    - student   iterator 1 next() = 0
    - student   iterator 2 next() = 0
    - reference iterator   next() = 1

    - failed on call 1 to next()
    - student   iterator 1 next() = 0
    - student   iterator 2 next() = 0
    - reference iterator   next() = 1

==> FAILED

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
    - throws wrong exception when calling remove()
    - throws a java.util.NoSuchElementException
    - should throw a java.lang.UnsupportedOperationException

    - fails to throw an exception when calling next() when iterator is exhausted

==> FAILED

Test 16: call iterator() when the deque is empty
==> passed


Total: 5/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
==> passed

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
==> passed

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
  * sample()
==> passed

Test 6: create multiple randomized queue objects at the same time
  * n = 10
  * n = 100
==> passed

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
  * n = 50
==> passed

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
  * m = 1000
==> passed

Test 9: create two nested iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
  * n = 50
==> passed

Test 11: create two iterators over different randomized queues
==> passed

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - throws wrong exception when calling next() when iterator is exhausted
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 17/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  I
  C
  F

  % java Permutation 3 < distinct.txt
  C
  D
  H

  % java Permutation 8 < duplicates.txt
  BB
  BB
  BB
  AA
  BB
  BB
  CC
  CC

==> passed

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  of
  the
  was
  was
  was
  age
  the
  wisdom

  % java Permutation 0 < distinct.txt
  F
  E
  G
  B
  D
  H
  I
  A
  C

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 9
  - lines of output in reference solution = 0

==> FAILED

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 1
  * filename = distinct.txt, k = 9
  * filename = permutation6.txt, k = 6
  * filename = permutation10.txt, k = 10
==> passed

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 6
  * filename = permutation8.txt, k = 2
  * filename = tinyTale.txt, k = 10
==> passed

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
  * filename = mediumTale.txt, k = 20
  * filename = tale.txt, k = 10
  * filename = tale.txt, k = 50
==> passed

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
  * filename = distinct.txt, k = 0
==> passed

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
  * filename = permutation4.txt, k = 2
  * filename = permutation4.txt, k = 3
  * filename = permutation4.txt, k = 4
  * filename = permutation6.txt, k = 2
==> passed

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
  * filename = permutation5.txt, k = 2
  * filename = permutation5.txt, k = 3
  * filename = duplicates.txt, k = 3
  * filename = permutation8.txt, k = 2
==> passed

Total: 8/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.05
=> passed      256000     0.23
=> passed      512000     0.24
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.05
=> passed      256000     0.09
=> passed      512000     0.19
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          424         
=> passed       64         3112         
=> passed      256        12328         
=> passed     1024        49192         
=> passed     4096       196648         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 48.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           88         
=> passed       64           88         
=> passed      256           88         
=> passed     1024           88         
=> passed     4096           88         
==> 5/5 tests passed

Memory after adding n = 2^i items: 88.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 1 of 100 deletions
    - maximum number of loitered objects at one time = 1
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
  * 100 random operations (0.4, 0.4, 0.1, 0.1)
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 14 of 100
==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed

Total: 26/28 tests passed!

================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          568         
=> passed       64         1080         
=> passed      128         2104         
=> passed      256         4152         
=> passed      512         8248         
=> passed     1024        16440         
=> passed     2048        32824         
=> passed     4096        65592         
=> passed     8192       131128         
==> 9/9 tests passed

Memory: 16.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          568         
=> passed       65         1080         
=> passed      129         2104         
=> passed      257         4152         
=> passed      513         8248         
=> passed     1025        16440         
=> passed     2049        32824         
=> passed     4097        65592         
=> passed     8193       131128         
==> 9/9 tests passed

Memory: 16.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1080         
=> passed       65         2104         
=> passed      129         4152         
=> passed      257         8248         
=> passed      513        16440         
=> passed     1025        32824         
=> passed     2049        65592         
=> passed     4097       131128         
=> passed     8193       262200         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          568         
=> passed       64         1080         
=> passed      128         2104         
=> passed      256         4152         
=> passed      512         8248         
=> passed     1024        16440         
=> passed     2048        32824         
=> passed     4096        65592         
=> passed     8192       131128         
==> 9/9 tests passed

Memory: 16.00 n + 56.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32           72         
=> passed       64           72         
=> passed      128           72         
=> passed      256           72         
=> passed      512           72         
=> passed     1024           72         
=> passed     2048           72         
=> passed     4096           72         
=> passed     8192           72         
==> 9/9 tests passed

Memory: 72.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32          192         
=> passed       64          320         
=> passed      128          576         
=> passed      256         1088         
=> passed      512         2112         
=> passed     1024         4160         
=> passed     2048         8256         
=> passed     4096        16448         
=> passed     8192        32832         
==> 9/9 tests passed

Memory: 4.00 n + 64.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        7          120         
=> passed       15          184         
=> passed       31          312         
=> passed       63          568         
=> passed      127         1080         
=> passed      255         2104         
=> passed      511         4152         
=> passed     1023         8248         
=> passed     2047        16440         
==> 9/9 tests passed

Memory: 8.00 n + 64.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     2049        65592         
=> passed     1025        32824         
=> passed      513        16440         
=> passed      257         8248         
=> passed      129         4152         
=> passed       65         2104         
=> passed       33         1080         
=> passed       17          568         
=> passed        9          312         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 8.00 n + 64.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 24.00   (R^2 = 1.000)

Running 75 total tests.

Total: 75/75 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 55 total tests.

Test 1a-1g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
    java.lang.NullPointerException

    Deque.addFirst(Deque.java:36)
    TimeDeque.timeRandomOperations(TimeDeque.java:28)
    TimeDeque.timeRandomOperations(TimeDeque.java:133)
    TimeDeque.test1(TimeDeque.java:167)
    TimeDeque.main(TimeDeque.java:282)

=> FAILED        1024   Test did not complete due to an exception.

==> 0/12 tests passed


Test 2a-2g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
    java.lang.NullPointerException

    Deque.addLast(Deque.java:51)
    TimeDeque.timeRandomOperations(TimeDeque.java:32)
    TimeDeque.timeRandomOperations(TimeDeque.java:132)
    TimeDeque.test2(TimeDeque.java:180)
    TimeDeque.main(TimeDeque.java:285)

=> FAILED        2048   Test did not complete due to an exception.

==> 1/12 tests passed


Test 3a-3g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
    java.lang.NullPointerException

    Deque.addFirst(Deque.java:36)
    TimeDeque.timeRandomOperations(TimeDeque.java:28)
    TimeDeque.timeRandomOperations(TimeDeque.java:132)
    TimeDeque.test3(TimeDeque.java:193)
    TimeDeque.main(TimeDeque.java:288)

=> FAILED        8192   Test did not complete due to an exception.

==> 3/12 tests passed


Test 4a-4g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
    
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to next() and hasNext() exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

=> FAILED        1024   Test did not complete due to an exception.

==> 0/12 tests passed


Test 5a-5g: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst()/removeLast() and addFirst()/addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed       16385     0.01
=> passed       32767     0.01
=> passed       32768     0.01
=> passed       32769     0.01
==> 7/7 tests passed

Total: 11/55 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 58 total tests.

Test 1: make n calls to enqueue(); make n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 2: make n calls to enqueue(); make n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue(); iterate over the n items;
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 4a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.05
=> passed     2048000     0.10
==> 12/12 tests passed


Test 5a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.03
=> passed      512000     0.04
=> passed     1024000     0.09
=> passed     2048000     0.19
==> 12/12 tests passed


Test 6a-g: make n random calls to enqueue(), sample(), dequeue(), isEmpty(),
           and size() with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.03
=> passed     1024000     0.06
=> passed     2048000     0.11
==> 12/12 tests passed


Test 7a-g: make n calls to enqueue(); iterate over the n items
           by calling next() and hasNext().

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.01
=> passed       32768     0.01
=> passed       65536     0.01
=> passed      128000     0.02
=> passed      256000     0.04
=> passed      512000     0.08
=> passed     1024000     0.15
=> passed     2048000     0.33
==> 12/12 tests passed


Test 8a-g: make n calls to enqueue(); interleave n calls each
           to dequeue() and enqueue().

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed       16385     0.00
=> passed       32767     0.01
=> passed       32768     0.01
=> passed       32769     0.01
==> 7/7 tests passed

Total: 58/58 tests passed!


================================================================
