See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (4 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 21 warnings)

Correctness:  30/41 tests passed
Memory:       1/1 tests passed
Timing:       39/41 tests passed

Aggregate score: 82.93%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.6K Jan  6 05:36 BruteCollinearPoints.java
3.3K Jan  6 05:36 FastCollinearPoints.java
3.9K Jan  6 05:36 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'lines_arr_list' but never reads the variable.  At BruteCollinearPoints.java:[line 74]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 61]
L D DLS_DEAD_LOCAL_STORE_OF_NULL DLS: Assigns the value null to the local variable 'lines_arr_list' but never reads the variable.  At FastCollinearPoints.java:[line 91]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 61]
Warnings generated: 4


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:9:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BruteCollinearPoints.java:31:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] BruteCollinearPoints.java:31:41: The parameter variable 'the_points' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] BruteCollinearPoints.java:40:32: The local variable 'lines_arr_list' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BruteCollinearPoints.java:55:32: The local variable 'x_to_y' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BruteCollinearPoints.java:56:32: The local variable 'y_to_z' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BruteCollinearPoints.java:57:32: The local variable 'z_to_w' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] FastCollinearPoints.java:32:5: Define constructors after static and instance variables but before methods. [DeclarationOrder]
[WARN] FastCollinearPoints.java:32:40: The parameter variable 'the_points' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] FastCollinearPoints.java:40:32: The local variable 'lines_arr_list' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:44:17: The local variable 'connect_counts' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:17:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Point.java:68:17: The local variable 'horizontal_equal' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:69:17: The local variable 'vertical_equal' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Point.java:79:26: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Point.java:79:62: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Point.java:134:34: The local (or parameter) variable 'x' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Point.java:134:43: The local (or parameter) variable 'y' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Point.java:135:21: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] Point.java:136:21: 'if' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 21 warning.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains the same segment more than once
    - segment 0: (20000, 21000) -> (6000, 7000)
    - segment 2: (20000, 21000) -> (6000, 7000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20000, 21000) -> (6000, 7000)
    - reference segment 1: (3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 2
    - 23 extra entries in student solution, including: '(14000, 15000) -> (20000, 21000)'
    - 1 missing entry in student solution: '(10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)'

  * filename = equidistant.txt
    - segments() contains the same segment more than once
    - segment 0: (10000, 0) -> (13000, 0)
    - segment 2: (10000, 0) -> (13000, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including: '(30000, 0) -> (20000, 0)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains the same segment more than once
    - segment 0: (1000, 17000) -> (1000, 28000)
    - segment 4: (1000, 17000) -> (1000, 28000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - number of entries in student   solution: 96
    - number of entries in reference solution: 4
    - 92 extra entries in student solution, including: '(22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains the same segment more than once
    - segment 0: (24000, 23000) -> (3000, 23000)
    - segment 2: (24000, 23000) -> (3000, 23000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 144
    - number of entries in reference solution: 6
    - 138 extra entries in student solution, including: '(18000, 26000) -> (19000, 28000)'

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains the same segment more than once
    - segment 0: (7453, 14118) -> (5067, 14118)
    - segment 2: (7453, 14118) -> (5067, 14118)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -> (5067, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(7821, 14118) -> (7453, 14118)'

  * filename = horizontal25.txt
    - segments() contains the same segment more than once
    - segment 0: (19459, 13870) -> (18005, 13870)
    - segment 2: (19459, 13870) -> (18005, 13870)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -> (18005, 13870)
    - reference segment 13: (2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)

    - number of entries in student   solution: 600
    - number of entries in reference solution: 25
    - 575 extra entries in student solution, including: '(19666, 20913) -> (16352, 20913)'

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains the same segment more than once
    - segment 0: (14660, 6588) -> (9311, 6588)
    - segment 2: (14660, 6588) -> (9311, 6588)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14660, 6588) -> (9311, 6588)
    - reference segment 0: (6127, 6588) -> (9311, 6588) -> (11000, 6588) -> (14660, 6588)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 1
    - 23 extra entries in student solution, including: '(11000, 6588) -> (14660, 6588)'

    - failed on trial 1 of 500
     4
     14660  6588
      6127  6588
     11000  6588
      9311  6588

  *  5 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 0: (7700, 4314) -> (9337, 4314)
    - segment 2: (7700, 4314) -> (9337, 4314)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7700, 4314) -> (9337, 4314)
    - reference segment 2: (3948, 4314) -> (7700, 4314) -> (9337, 4314) -> (17725, 4314)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(13994, 19313) -> (12865, 19313)'

    - failed on trial 1 of 250
     20
      7700  4314
     12865 19313
     12555 19313
     16488  3225
      5611 19313
     17725  4314
      8650  1323
     14359  1323
     13994 19313
     18267  3225
      3948  4314
      4934  1323
      8382 11977
     13873  1323
     17193 11977
      4235  3225
      9277 11977
      9337  4314
      1241  3225
     20443 11977

  * 10 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 0: (12663, 9398) -> (6763, 9398)
    - segment 2: (12663, 9398) -> (6763, 9398)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12663, 9398) -> (6763, 9398)
    - reference segment 4: (6763, 9398) -> (12663, 9398) -> (14120, 9398) -> (20234, 9398)

    - number of entries in student   solution: 240
    - number of entries in reference solution: 10
    - 230 extra entries in student solution, including: '(19637, 20020) -> (8536, 20020)'

    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains the same segment more than once
    - segment 0: (11705, 4358) -> (9938, 4358)
    - segment 2: (11705, 4358) -> (9938, 4358)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11705, 4358) -> (9938, 4358)
    - reference segment 1: (2760, 4358) -> (9938, 4358) -> (11705, 4358) -> (13426, 4358)

    - number of entries in student   solution: 360
    - number of entries in reference solution: 15
    - 345 extra entries in student solution, including: '(20949, 19687) -> (8204, 19687)'

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains the same segment more than once
    - segment 0: (14407, 19953) -> (14407, 17188)
    - segment 2: (14407, 19953) -> (14407, 17188)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -> (14407, 17188)
    - reference segment 3: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(14407, 17831) -> (14407, 19953)'

  * filename = vertical25.txt
    - segments() contains the same segment more than once
    - segment 0: (11585, 5103) -> (11585, 4132)
    - segment 2: (11585, 5103) -> (11585, 4132)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -> (11585, 4132)
    - reference segment 12: (11585, 4132) -> (11585, 5103) -> (11585, 11220) -> (11585, 12912)

    - number of entries in student   solution: 600
    - number of entries in reference solution: 25
    - 575 extra entries in student solution, including: '(1825, 19680) -> (1825, 19478)'

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains the same segment more than once
    - segment 0: (3504, 1821) -> (3504, 1550)
    - segment 2: (3504, 1821) -> (3504, 1550)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3504, 1821) -> (3504, 1550)
    - reference segment 0: (3504, 1550) -> (3504, 1821) -> (3504, 15925) -> (3504, 20937)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 1
    - 23 extra entries in student solution, including: '(3504, 15925) -> (3504, 20937)'

    - failed on trial 1 of 500
     4
      3504  1821
      3504 20937
      3504 15925
      3504  1550

  *  5 random vertical line segments
    - segments() contains the same segment more than once
    - segment 0: (4250, 10804) -> (4250, 6706)
    - segment 2: (4250, 10804) -> (4250, 6706)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4250, 10804) -> (4250, 6706)
    - reference segment 1: (4250, 6706) -> (4250, 9288) -> (4250, 10804) -> (4250, 11558)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(8494, 18813) -> (8494, 17491)'

    - failed on trial 1 of 250
     20
      4250 10804
     13706  2433
      1193 11530
     13706 14299
      8494 17491
      4250 11558
      8494 18813
      4250  9288
      1193  5654
     13706  6123
      4250  6706
      4643 17508
      4643  5314
      1193 13486
     13706  8434
      1193  6985
      8494 11262
      4643  1270
      4643 12294
      8494 10075

  * 10 random vertical line segments
    - segments() contains the same segment more than once
    - segment 0: (2012, 2691) -> (2012, 17111)
    - segment 2: (2012, 2691) -> (2012, 17111)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2012, 2691) -> (2012, 17111)
    - reference segment 1: (2012, 2691) -> (2012, 17111) -> (2012, 19843) -> (2012, 20938)

    - number of entries in student   solution: 240
    - number of entries in reference solution: 10
    - 230 extra entries in student solution, including: '(7919, 20719) -> (7919, 20958)'

    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains the same segment more than once
    - segment 0: (3584, 6443) -> (3584, 5371)
    - segment 2: (3584, 6443) -> (3584, 5371)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3584, 6443) -> (3584, 5371)
    - reference segment 2: (3584, 1966) -> (3584, 5371) -> (3584, 6443) -> (3584, 18905)

    - number of entries in student   solution: 360
    - number of entries in reference solution: 15
    - 345 extra entries in student solution, including: '(5004, 20188) -> (5004, 20550)'

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains the same segment more than once
    - segment 0: (10000, 0) -> (13000, 0)
    - segment 2: (10000, 0) -> (13000, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including: '(30000, 0) -> (20000, 0)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains the same segment more than once
    - segment 0: (1000, 17000) -> (1000, 28000)
    - segment 4: (1000, 17000) -> (1000, 28000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - number of entries in student   solution: 96
    - number of entries in reference solution: 4
    - 92 extra entries in student solution, including: '(22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains the same segment more than once
    - segment 0: (24000, 23000) -> (3000, 23000)
    - segment 2: (24000, 23000) -> (3000, 23000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 144
    - number of entries in reference solution: 6
    - 138 extra entries in student solution, including: '(18000, 26000) -> (19000, 28000)'

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains the same segment more than once
    - segment 0: (10000, 0) -> (13000, 0)
    - segment 2: (10000, 0) -> (13000, 0)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including: '(30000, 0) -> (20000, 0)'
    - 3 missing entries in student solution, including: '(30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)'

  * filename = input40.txt
    - segments() contains the same segment more than once
    - segment 0: (1000, 17000) -> (1000, 28000)
    - segment 4: (1000, 17000) -> (1000, 28000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - number of entries in student   solution: 96
    - number of entries in reference solution: 4
    - 92 extra entries in student solution, including: '(22000, 29000) -> (28000, 29000)'

  * filename = input48.txt
    - segments() contains the same segment more than once
    - segment 0: (24000, 23000) -> (3000, 23000)
    - segment 2: (24000, 23000) -> (3000, 23000)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 144
    - number of entries in reference solution: 6
    - 138 extra entries in student solution, including: '(18000, 26000) -> (19000, 28000)'


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains the same segment more than once
    - segment 0: (5229, 4461) -> (5329, 9821)
    - segment 2: (5229, 4461) -> (5329, 9821)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5229, 4461) -> (5329, 9821)
    - reference segment 0: (5209, 3389) -> (5229, 4461) -> (5239, 4997) -> (5329, 9821)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 1
    - 23 extra entries in student solution, including: '(5329, 9821) -> (5239, 4997)'

    - failed on trial 1 of 500
     4
      5229  4461
      5239  4997
      5209  3389
      5329  9821

  *  5 random line segments
    - segments() contains the same segment more than once
    - segment 0: (9396, 15481) -> (5952, 14497)
    - segment 2: (9396, 15481) -> (5952, 14497)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9396, 15481) -> (5952, 14497)
    - reference segment 0: (4230, 14005) -> (5952, 14497) -> (8248, 15153) -> (9396, 15481)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(15123, 16785) -> (14799, 16159)'

    - failed on trial 1 of 250
     20
      9396 15481
      8248 15153
      7509  2074
     12687 11713
      8794   187
     11613 12008
     14799 16159
      7671  2387
     11313  7645
     15123 16785
      7510 12476
      9023   865
      6257  5679
      6794  8592
      4230 14005
      5952 14497
      8942 20244
      3171  6032
     12082 12340
      2702  5700

  * 10 random line segments
    - segments() contains the same segment more than once
    - segment 0: (2727, 6437) -> (7809, 7943)
    - segment 2: (2727, 6437) -> (7809, 7943)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2727, 6437) -> (7809, 7943)
    - reference segment 2: (2727, 6437) -> (7809, 7943) -> (8656, 8194) -> (12044, 9198)

    - number of entries in student   solution: 240
    - number of entries in reference solution: 10
    - 230 extra entries in student solution, including: '(23298, 17784) -> (19438, 14772)'

    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains the same segment more than once
    - segment 0: (9646, 14869) -> (2938, 8135)
    - segment 2: (9646, 14869) -> (2938, 8135)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9646, 14869) -> (7066, 12279)
    - reference segment 5: (2938, 8135) -> (4486, 9689) -> (7066, 12279) -> (9646, 14869)

    - number of entries in student   solution: 360
    - number of entries in reference solution: 15
    - 345 extra entries in student solution, including: '(16097, 21198) -> (14679, 19228)'

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment
    - segments() contains the same segment more than once
    - segment 0: (14688, 8903) -> (14688, 9505)
    - segment 2: (14688, 8903) -> (14688, 9505)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14688, 8903) -> (14688, 9505)
    - reference segment 0: (14688, 8903) -> (14688, 9505) -> (14688, 12214) -> (14688, 12644)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 1
    - 23 extra entries in student solution, including: '(14688, 12214) -> (14688, 12644)'

    - failed on trial 1 of 500
     4
     14688  8903
     14688 12644
     14688 12214
     14688  9505

  *  5 random line segments
    - segments() contains the same segment more than once
    - segment 0: (3892, 9493) -> (4552, 12193)
    - segment 2: (3892, 9493) -> (4552, 12193)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3892, 9493) -> (4552, 12193)
    - reference segment 3: (3540, 8053) -> (3892, 9493) -> (4552, 12193) -> (4772, 13093)

    - number of entries in student   solution: 120
    - number of entries in reference solution: 5
    - 115 extra entries in student solution, including: '(4552, 12193) -> (4772, 13093)'

    - failed on trial 1 of 250
     20
      3892  9493
      8780  6619
      6760  6015
      4772 13093
     10949  8374
     14802   494
      7050  6285
      3540  8053
     11630 12262
      4552 12193
      6412  5691
     14814   870
      5658  4989
     10680 10381
     10380  9787
     12929  9430
     10349  8054
     14369 10198
     14841  1716
     14883  3032

  * 10 random line segments
    - segments() contains the same segment more than once
    - segment 0: (14742, 11769) -> (12168, 5529)
    - segment 2: (14742, 11769) -> (12168, 5529)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (14742, 11769) -> (13026, 7609)
    - reference segment 6: (12168, 5529) -> (13026, 7609) -> (13422, 8569) -> (14742, 11769)

    - number of entries in student   solution: 240
    - number of entries in reference solution: 10
    - 230 extra entries in student solution, including: '(13652, 12456) -> (14777, 14931)'

    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains the same segment more than once
    - segment 0: (9961, 12960) -> (10309, 13656)
    - segment 2: (9961, 12960) -> (10309, 13656)

    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9961, 12960) -> (10309, 13656)
    - reference segment 11: (9853, 12744) -> (9961, 12960) -> (10309, 13656) -> (10513, 14064)

    - number of entries in student   solution: 360
    - number of entries in reference solution: 15
    - 345 extra entries in student solution, including: '(10309, 13656) -> (10513, 14064)'

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 7/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
==> passed

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
  * 25-by-4 grid
==> passed

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> FAILED

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 20/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01      131040           0         131040                  120         
=> passed    32   0.02     2589120           0        2589120                  496         
=> passed    64   0.21    45747072           0       45747072                 2016         
=> passed   128   3.65   768096000           0      768096000                 8128         
=> passed   256  65.48 12585070080           0    12585070080                32640         
Aborting: time limit of 10 seconds exceeded
Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01      131040           0         131040                  120         
=> passed    32   0.02     2589120           0        2589120                  496         
=> passed    64   0.26    45747072           0       45747072                 2016         
=> passed   128   4.10   768096000           0      768096000                 8128         
=> passed   256  68.95 12585070080           0    12585070080                32640         
Aborting: time limit of 10 seconds exceeded
Total: 8/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        8064       18785          45634                20802         
=> passed   128   0.01       32512       89437         211386                97553         
=> passed   256   0.10      130560      416495         963550               449105         
=> passed   512   0.28      523264     1887573        4298410              2020547         
=> passed  1024   0.45     2095104     8572664       19240432              9099646         
=> passed  2048   1.48     8384512    38067290       84519092             40307789         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84519092 / 19240432) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064        4764          17592                 9029         
=> passed   128   0.00       32512       17796          68104                31058         
=> passed   256   0.00      130560       68717         267994               112412         
=> passed   512   0.02      523264      269399        1062062               423341         
=> passed  1024   0.03     2095104     1065026        4225156              1636607         
=> passed  2048   0.09     8384512     4231214       16846940              6425616         
=> passed  4096   0.34    33546240    16859163       67264566             25446890         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (67264566 / 16846940) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064       14906          37876                19060         
=> passed   128   0.01       32512       43854         120220                72212         
=> passed   256   0.01      130560      149618         429796               277009         
=> passed   512   0.03      523264      548156        1619576              1074360         
=> passed  1024   0.09     2095104     2087496        6270096              4210890         
=> passed  2048   0.33     8384512     8122445       24629402             16605250         
=> passed  4096   1.28    33546240    31990953       97528146             65835274         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (97528146 / 24629402) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        8064       18045          44154                21010         
=> passed   128   0.00       32512       75863         184238                93645         
=> passed   256   0.01      130560      232229         595018               373329         
=> passed   512   0.04      523264      854545        2232354              1472388         
=> passed  1024   0.17     2095104     3260991        8617086              5841659         
=> passed  2048   0.47     8384512    12699218       33782948             23266454         
=> passed  4096   1.81    33546240    50043244      133632728             92747868         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (133632728 / 33782948) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================



